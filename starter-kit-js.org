#+TITLE: Starter Kit JS

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit JS
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :mode ("\\.js$" . rjsx-mode)
    :interpreter ("node" . rjsx-mode)
    :init

    ;; Set indentation to 2 spaces
    (setq rjsx-basic-offset 2)
    (custom-set-variables
     '(js-indent-level 2))

    :config
    (add-hook 'rjsx-mode-hook 'run-starter-kit-coding-hook)
    (add-hook 'rjsx-mode-hook 'flycheck-mode)
    (add-hook 'rjsx-mode-hook
              '(lambda ()
                 (define-key rjsx-mode-map (kbd "C-c i") 'js-doc-insert-function-doc)
                 (define-key rjsx-mode-map "@" 'js-doc-insert-tag)))
    )
  (use-package js-doc
    :ensure t
    :defer t)
#+END_SRC

#+begin_src emacs-lisp
(font-lock-add-keywords 'rjsx-mode
                        '(("\\(FIX\\|TODO\\|BUG\\|HACK\\|REFACTOR\\)"
                           1 font-lock-warning-face t)))
#+end_src

* Tern
Once in a while it can be usefull to restart tern.
#+BEGIN_SRC emacs-lisp
    (use-package company-tern
        :ensure t
        :defer t
        :bind (("<C-return>" . company-tern))
        :config
        (add-to-list 'company-backends 'company-tern))



      (defun delete-tern-process ()
        (interactive)
        (delete-process "Tern"))

  ;    (add-hook 'rjsx-mode-hook (lambda ()
  ;                               (auto-complete-mode)))
  (add-hook 'rjsx-mode-hook (lambda ()
                              (company-mode)))
  (add-hook 'rjsx-mode-hook (lambda ()
                              (tern-mode)))

  ;    (use-package tern-auto-complete
  ;      :ensure t
  ;      :defer t)

      (use-package tern
        :defer t
        :ensure t
        :config
        (eval-after-load 'tern
          '(progn
   ;          (require 'tern-auto-complete)
            (require 'company-tern)
  ;           (tern-ac-setup)
            ))
        )
#+END_SRC

* Spell checking
 :PROPERTIES:
 :tangle:  no
 :END:
#+BEGIN_SRC emacs-lisp
  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  ;; disable json-jsonlist checking for json files
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(json-jsonlist)))


  ;; use eslint with web-mode for jsx files
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode)

#+END_SRC

* ESLint Fix

#+BEGIN_SRC emacs-lisp
  (use-package eslint-fix
    :ensure t)
  (defun js-fix ()
    (interactive)
    (setq eslint-fix-executable (my/use-eslint-from-node-modules))
    (eslint-fix))
#+END_SRC

* JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode ("\\.json$" . json-mode))
#+END_SRC

* Hide/Show
#+BEGIN_SRC emacs-lisp
  ;  (add-hook 'rjsx-mode-hook 'enable-hide-show-mode)
  (add-hook 'rjsx-mode-hook 'enable-origami)
  (add-hook 'json-mode-hook 'enable-hide-show-mode)
#+END_SRC

* Typescript

#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  "Set up Tide mode."
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

(use-package tide
  :ensure t
  :config
  (setq company-tooltip-align-annotations t)
  (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC
