#+TITLE: Starter Kit Misc

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.


** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (prefer-coding-system 'utf-8)

      (custom-set-variables
       ;; Bars + scrolling
       '(menu-bar-mode nil)
       '(scroll-bar-mode nil)
       '(scroll-error-top-bottom t)
       '(tool-bar-mode nil)
       '(c-basic-offset 2)
       ;; Theme
       '(custom-enabled-themes (quote (tsdh-dark))))

       (setq visible-bell t
             font-lock-maximum-decoration t
             inhibit-startup-message t
             initial-scratch-message (concat
                                      ";;     ____________________________________\n"
                                      ";;    / __/  _____      _      ____   / __/\n"
                                      ";;   / _/   /     \\    / \\    / __/   \\ \\\n"
                                      ";;  / /__  / _  _  \\  / _ \\  / /__  __/ /\n"
                                      ";; /____/ /_/ \\/ \\_/ /_/ \\_\\ \\___/ /___/\n"
                                      ";;\n"
                                      ";; M-x rgrep | grep for something in a directory\n"
                                      ";;\n\n")
             transient-mark-mode t
             shift-select-mode nil
             column-number-mode t
             ;; uniquify-buffer-name-style 'forward
             whitespace-style '(trailing tabs lines-tail indentation face)
             whitespace-line-column 80
             whitespace-global-modes '(not org-mode)
             ;; ediff-window-setup-function 'ediff-setup-windows-plain
             )
#+end_src

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
  (when (> emacs-major-version 21)
    (ido-mode t)
    (setq 
     ;; if t ido matches only if entered text is prefix of filename
     ido-enable-prefix nil
     ;; flexible matching
     ido-enable-flex-matching t
     ;; ask if new buffer should be created (prompt), dont ask (always), dont create buffers (never)
                                          ;        ido-create-new-buffer 'always
     ;; maximum number of matches
     ido-max-prospects 10
     ido-everywhere t))

  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+end_src

** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'tab-width 2)
  (set-default 'c-basic-offset 2)

;  (set-default 'imenu-auto-rescan t)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)


  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)

  (global-set-key "\C-x\ \M-\C-e" 'eval-and-replace)
#+end_src

** Browser (linux)/PDF Viewer (linux)
#+begin_src emacs-lisp
      (when (eq system-type 'gnu/linux)
        (setq browse-url-browser-function 'browse-url-generic
              browse-url-generic-program "firefox")
        (setq org-file-apps
              (quote
               ((auto-mode . emacs)
                ("\\.mm\\'" . default)
                ("\\.x?html?\\'" . "chromium %s")
                ("\\.pdf\\'" . "evince %s")))))

      (when (eq system-type 'windows-nt)
        (setq org-file-apps
              (quote
               ((directory . emacs)
                (auto-mode . emacs)))))
#+end_src

** Killring backwards
#+begin_src emacs-lisp
  ;; Killring backwards
  (defun yank-pop-forwards (arg)
    (interactive "p")
    (yank-pop (- arg)))

  (global-set-key "\M-Y" 'yank-pop-forwards) ; M-Y (M-Shift-y), Killring rückwärts drehen
#+end_src

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (
           ;; Cursor in each line of active region
           ("C-c m r" . mc/edit-lines)
           ;; based on keywords:
           ("C-c m n" . mc/mark-next-like-this)
           ("C-c m p" . mc/mark-previous-like-this)
           ("C-c m a" . mc/mark-all-like-this)
           ;; pop marks and make them to cursors
           ("C-c m m" . mc/mark-pop)
           ;; Rectangular region
           ("C-c M-SPC" . set-rectangular-region-anchor)))

#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Ace-Jump-Mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-isearch
    :ensure t
    :config (progn
              (global-ace-isearch-mode +1)
              (setq ace-isearch-use-jump nil)))

  ;;    (use-package ace-jump-mode
  ;;      :ensure t
  ;;      :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC

** Ivy

#+begin_src emacs-lisp
  (use-package swiper
    :ensure t)
  (use-package ivy
    :ensure t
    :config (progn
              (ivy-mode 1)

              (setq ivy-use-virtual-buffers t)
              (setq ivy-count-format "(%d/%d) ")))
#+end_src

** Flyspell
#+BEGIN_SRC emacs-lisp
    (when (eq system-type 'gnu/linux)
      (use-package flyspell
        :ensure t
        :init
        (add-hook 'org-mode-hook 'flyspell-mode)
        (add-hook 'text-mode-hook 'flyspell-mode)
        :bind
        (("C-; ," . flyspell-goto-next-error)
         ("C-; ." . flyspell-auto-correct-word))
        :config
        (setq flyspell-issue-message-flag nil)
        (define-key flyspell-mode-map (kbd "C-.") nil)
        (define-key flyspell-mode-map (kbd "C-,") nil)
        (define-key flyspell-mode-map (kbd "C-;") nil)
        (with-eval-after-load "ispell"
          (setq ispell-program-name "hunspell")
          (setq ispell-dictionary "en_US,de_DE")
          (ispell-set-spellchecker-params)
          (when (> emacs-major-version 24)
            (ispell-hunspell-add-multi-dic "en_US,de_DE")))
        ))
#+END_SRC

Install the required dictionaries!
#+BEGIN_SRC sh
  # Ubuntu
  sudo apt-get install aspell-de
  # Arch
  sudo pacman -S aspell-de
#+END_SRC

#+RESULTS:

** Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (global-auto-complete-mode t)
    :config
    (ac-config-default))
#+END_SRC

** Jump in 3 line-steps
#+BEGIN_SRC emacs-lisp
;; 3 Lines at once
(global-set-key "\M-n" '(lambda ()
                          (interactive)
                          (forward-line 3)
                          ))

(global-set-key "\M-p" '(lambda ()
                          (interactive)
                          (forward-line -3)
                          ))
#+END_SRC

** Workgroups
#+BEGIN_SRC emacs-lisp
  (use-package workgroups2
    :ensure t
    :disabled t
    :config
    (setq wg-prefix-key (kbd "C-x w"))
    (setq wg-flag-modified t
          wg-mode-line-decor-left-brace "|"
          wg-mode-line-decor-right-brace "|"
          wg-mode-line-decor-divider "|")
    (workgroups-mode 1))
#+END_SRC

** Google Translator
#+BEGIN_SRC emacs-lisp
;; https://github.com/atykhonov/google-translate
  (use-package google-translate
    :ensure t
    :init
    (setq google-translate-default-source-language "en")
    (setq google-translate-default-target-language "de")
    :config
    (require google-translate-default-ui)
    :bind (
           ("C-c t" . google-translate-at-point)
           ("C-c T" . google-translate-query-translate)
           ("C-c R" . google-translate-query-translate-reverse)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
    (use-package ssh-agency
      :ensure t
      :defer t)

    (use-package magit
      :ensure t
      :defer t
      :config
      (when (eq system-type 'windows-nt)
        (require 'ssh-agency)
        (ssh-agency-add-keys my-ssh-agency-key-list)
        (ssh-agency-ensure)))
#+END_SRC

** Dired
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (local-set-key (kbd "b") 'dired-up-directory)))
#+end_src

** Toggle Split
- [[https://www.emacswiki.org/emacs/ToggleWindowSplit][Source: emacswiki.com]]

"Vertical split shows more of each line, horizontal split shows more
lines. This code toggles between them. It only works for frames with
exactly two windows. The top window goes to the left or vice-versa. I
was motivated by ediff-toggle-split and helped by
TransposeWindows. There may well be better ways to write this."

#+begin_src emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
       (next-win-buffer (window-buffer (next-window)))
       (this-win-edges (window-edges (selected-window)))
       (next-win-edges (window-edges (next-window)))
       (this-win-2nd (not (and (<= (car this-win-edges)
           (car next-win-edges))
             (<= (cadr this-win-edges)
           (cadr next-win-edges)))))
       (splitter
        (if (= (car this-win-edges)
         (car (window-edges (next-window))))
      'split-window-horizontally
    'split-window-vertically)))
  (delete-other-windows)
  (let ((first-win (selected-window)))
    (funcall splitter)
    (if this-win-2nd (other-window 1))
    (set-window-buffer (selected-window) this-win-buffer)
    (set-window-buffer (next-window) next-win-buffer)
    (select-window first-win)
    (if this-win-2nd (other-window 1))))))
#+end_src

** Ask before closing emacs
#+begin_src emacs-lisp
  (defun close-ask-if-many-buffers ()
    "Asks if you really want to close emacs if more than 30 buffers are open.
   Otherwise closes emacs without asking."
    (interactive)
    (if (> (length (buffer-list)) 20)
        (progn
          (message "Really close? Many buffers are open. (y/n) ")
          (if (eq (read-char) 121)
              (save-buffers-kill-terminal)))
      (save-buffers-kill-terminal)))

  (global-set-key (kbd "C-x C-c") 'close-ask-if-many-buffers)
#+end_src

** Prolog
#+begin_src emacs-lisp
  (add-hook 'prolog-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-c") 'ediprolog-dwim)
              (run-starter-kit-coding-hook)))
#+end_src

** Transparency

#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 . 85))
#+END_SRC

** Themes

#+BEGIN_SRC emacs-lisp
;;(load-file "~/.emacs.d/src/at-day-theme.el")
#+END_SRC
