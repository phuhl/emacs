#+TITLE: Starter Kit Misc
This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.

** Startup message

#+BEGIN_SRC emacs-lisp
  (defvar startup-buffer-location
        (if (and (boundp 'custom-startup-buffer-location)
                 (file-exists-p custom-startup-buffer-location))
            custom-startup-buffer-location
          "~/.emacs.d/startupbuffer.org"))
#+END_SRC

#+NAME: startup-message-template
#+BEGIN_EXAMPLE

#+END_EXAMPLE

#+BEGIN_EXAMPLE

:     ________  __  ____  ____  ________  _____________________________ 
:    / ____  /_/ /_/ __/ / __/ / ____  /_/ / _____     _     ____ / __/
:    \ \  / __  __  _/  / _/   \ \  / __  / /     \   / \   / __/ \ \ 
:  __/ / / / / / / /__ / /_____/ / / / / /_/ _  _  \_/ _ \_/ /____/ /
: /___/ /_/ /_/  \_____\________/ /_/ /____\/ \/ \____/ \__\_______/
:                        the sheeshmost editor                        

#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(defun get-img-size (ext)
  (car (image-size (create-image (expand-file-name (concat "sheeshmacs" ext)
                                                   user-emacs-directory)))))
(defun fancy-splash-head ()
  (interactive)
  "Insert the head part of the splash screen into the current buffer."
  (let* ( (window-width (window-width))
          (image-file-ext (if (>= window-width (get-img-size ".svg")) ".svg"
                            (if (>= window-width   (get-img-size "_1.svg")) "_1.svg"
                              (if (>= window-width   (get-img-size "_2.svg")) "_2.svg" "_3.svg"))))
          (image-file (expand-file-name (concat "sheeshmacs" image-file-ext)
                                        user-emacs-directory))
          (img (create-image image-file))
          (image-width (and img (car (image-size img)))))
    (insert "\n\n\n\n")
    ;; Center the image in the window.
    (insert (propertize " " 'display `(space :align-to (+ center (-0.5 . ,img)))))
    (insert-image img)
    (insert "\n\n\n")))
#+END_SRC
** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp :var startup-message-template=startup-message-template
  ;; Use UTF-8
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; Set font size
  (when (> (/ (display-pixel-width) (/ (display-mm-width) 25.4)) 200)
    (set-face-attribute 'default nil :height 80))

  (prefer-coding-system 'utf-8)

  (custom-set-variables
   ;; Bars + scrolling bars hidden
   '(menu-bar-mode nil)
   '(scroll-bar-mode nil)
   '(tool-bar-mode nil)

   ;; Disable bell when top or bottom is reached
   '(scroll-error-top-bottom t)

   ;; Use native mail client
   '(send-mail-function (quote mailclient-send-it))

   '(c-basic-offset 2) )


  (setq
   visible-bell t
   font-lock-maximum-decoration t
   inhibit-startup-message t
   initial-major-mode 'org-mode
   initial-scratch-message (with-temp-buffer
                             (insert (concat "[[" startup-buffer-location "][Edit me]]"))
                             (when ( window-system )
                               (fancy-splash-head))
                             (if (file-exists-p startup-buffer-location)
                                 (insert-file-contents startup-buffer-location)
                               startup-message-template)
                             (buffer-string))

   transient-mark-mode t
   shift-select-mode nil
   column-number-mode t
   ;; uniquify-buffer-name-style 'forward
   whitespace-style '(trailing tabs lines-tail indentation face)
   whitespace-line-column 80
   whitespace-global-modes '(not org-mode)
   ;; ediff-window-setup-function 'ediff-setup-windows-plain
   )
#+end_src

** Modeline

#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format '("%e"
                           mode-line-front-space
  ;                         mode-line-mule-info
  ;                         mode-line-client
                           mode-line-modified
  ;                         mode-line-remote
                           mode-line-frame-identification
                           mode-line-buffer-identification
                           " | "
                           mode-line-position

                           (vc-mode vc-mode)
                           " |"
                           mode-line-misc-info
                           "| "
                           mode-line-modes
                           mode-line-end-spaces))
#+END_SRC

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
  (when (> emacs-major-version 21)
    (ido-mode t)
    (setq 
     ;; if t ido matches only if entered text is prefix of filename
     ido-enable-prefix nil
     ;; flexible matching
     ido-enable-flex-matching t
     ;; ask if new buffer should be created (prompt), dont ask (always), dont create buffers (never)
                                          ;        ido-create-new-buffer 'always
     ;; maximum number of matches
     ido-max-prospects 10
     ido-everywhere t))

  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+end_src

** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'tab-width 2)
  (set-default 'c-basic-offset 2)

;  (set-default 'imenu-auto-rescan t)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)


  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)

  (global-set-key "\C-x\ \M-\C-e" 'eval-and-replace)
#+end_src

** Browser (linux)/PDF Viewer (linux)
#+begin_src emacs-lisp
      (when (eq system-type 'gnu/linux)
        (setq browse-url-browser-function 'browse-url-generic
              browse-url-generic-program "firefox")
        (setq org-file-apps
              (quote
               ((auto-mode . emacs)
                ("\\.mm\\'" . default)
                ("\\.x?html?\\'" . "chromium %s")
                ("\\.pdf\\'" . "evince %s")))))

      (when (eq system-type 'windows-nt)
        (setq org-file-apps
              (quote
               ((directory . emacs)
                (auto-mode . emacs)))))
#+end_src

** Killring backwards
#+begin_src emacs-lisp
  ;; Killring backwards
  (defun yank-pop-forwards (arg)
    (interactive "p")
    (yank-pop (- arg)))

  (global-set-key "\M-Y" 'yank-pop-forwards) ; M-Y (M-Shift-y), Killring rückwärts drehen
#+end_src

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (
           ;; Cursor in each line of active region
           ("C-c m r" . mc/edit-lines)
           ;; based on keywords:
           ("C-c m n" . mc/mark-next-like-this)
           ("C-c m p" . mc/mark-previous-like-this)
           ("C-c m a" . mc/mark-all-like-this)
           ;; pop marks and make them to cursors
           ("C-c m m" . mc/mark-pop)
           ;; Rectangular region
           ("C-c M-SPC" . set-rectangular-region-anchor)))

#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Ace-Jump-Mode
#+BEGIN_SRC emacs-lisp
;;  (use-package ace-isearch
;;    :ensure t
;;    :config (progn
;;              (global-ace-isearch-mode +1)
;;              (setq ace-isearch-use-jump nil)))

  ;;    (use-package ace-jump-mode
  ;;      :ensure t
  ;;      :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC

** Ivy

#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (global-set-key (kbd "C-M-s") 'swiper)
    :bind (:map swiper-map
                ("C-M-s" . ivy-previous-history-element)))
  (use-package ivy
    :ensure t
    :config (progn
              '(ivy-sort-matches-functions-alist
                (quote
                 ((t)
                  (ivy-completion-in-region . ivy--shorter-matches-first)
                  (ivy-switch-buffer . ivy--shorter-matches-first)
                  (counsel-find-file . ivy--shorter-matches-first)
                  (counsel-M-x . ivy--shorter-matches-first))))
              (custom-set-variables
               '(ivy-extra-directories nil))
              (ivy-mode 1)

              (setq ivy-use-virtual-buffers t)
              (setq enable-recursive-minibuffers t)
              (setq ivy-count-format "(%d/%d) ")))
  (use-package counsel
    :ensure t
    :config
    (custom-set-variables
     '(counsel-preselect-current-file t))
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+end_src

** Flyspell
Requires installing hunspell and the dictionaries of your desire (in
this case en_US and de_DE on your system.

On windows, download hunspell (e.g. from [[https://sourceforge.net/projects/ezwinports/][here]]) and put the extracted
folders it in a directory of your choice. Add 
: (setq exec-path (append exec-path '("C:/Program Files/hunspell/bin")))=
(with your correct path) to your [[file:pathes.el][pathes]] file in the section
"PATH-Variable". Download the required dictionaries from [[https://github.com/wooorm/dictionaries][here]] (you
will need the =.dic= and =.aff= files and if you want more than one,
you might need to rename them from =index.dic= to e.g. =de_DE.dic= and
the =.aff= respectively) and put them in the folder
=<pathtohunspell>/hunspell/share/hunspell=.

More information [[https://lists.gnu.org/archive/html/help-gnu-emacs/2014-04/msg00030.html][here]].

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :init
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'text-mode-hook 'flyspell-mode)
    :bind
    (("C-; ," . flyspell-goto-next-error)
     ("C-; ." . flyspell-auto-correct-word))
    :config
    (setq flyspell-issue-message-flag nil)
    (define-key flyspell-mode-map (kbd "C-.") nil)
    (define-key flyspell-mode-map (kbd "C-,") nil)
    (define-key flyspell-mode-map (kbd "C-;") nil)
    (with-eval-after-load "ispell"
      (setq ispell-program-name
            (if (eq system-type 'gnu/linux)
                "hunspell"
              (when (eq system-type 'windows-nt)
                (locate-file "hunspell"
                             exec-path exec-suffixes 'file-executable-p))))
      (setq ispell-dictionary "en_US,de_DE")
      (ispell-set-spellchecker-params)
      (when (> emacs-major-version 24)
        (ispell-hunspell-add-multi-dic "en_US,de_DE"))))
#+END_SRC

Install the required dictionaries!
#+BEGIN_SRC sh
  # Ubuntu
  sudo apt-get install aspell-de
  # Arch
  sudo pacman -S aspell-de
#+END_SRC

#+RESULTS:

** Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (global-auto-complete-mode t)
    :config
    (ac-config-default))
#+END_SRC

** Jump in 3 line-steps
#+BEGIN_SRC emacs-lisp
;; 3 Lines at once
(global-set-key "\M-n" '(lambda ()
                          (interactive)
                          (next-line 3)
                          ))

(global-set-key "\M-p" '(lambda ()
                          (interactive)
                          (next-line -3)
                          ))
#+END_SRC

** Workgroups
#+BEGIN_SRC emacs-lisp
  (use-package workgroups2
    :ensure t
    :disabled t
    :config
    (setq wg-prefix-key (kbd "C-x w"))
    (setq wg-flag-modified t
          wg-mode-line-decor-left-brace "|"
          wg-mode-line-decor-right-brace "|"
          wg-mode-line-decor-divider "|")
    (workgroups-mode 1))
#+END_SRC

** Google Translator
#+BEGIN_SRC emacs-lisp
;; https://github.com/atykhonov/google-translate
  (use-package google-translate
    :ensure t
    :init
    (setq google-translate-default-source-language "en")
    (setq google-translate-default-target-language "de")
    :config
    (require google-translate-default-ui)
    :bind (
           ("C-c t" . google-translate-at-point)
           ("C-c T" . google-translate-query-translate)
           ("C-c R" . google-translate-query-translate-reverse)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
;  (when (eq system-type 'windows-nt)
;    (use-package ssh-agency
;      :ensure t
;      :defer t))

  (use-package magit
    :ensure t
    :defer t
    :config
;    (when (eq system-type 'windows-nt)
;      (require 'ssh-agency)
;      (ssh-agency-add-keys my-ssh-agency-key-list)
;      (ssh-agency-ensure))
)
#+END_SRC

** Dired
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (local-set-key (kbd "b") 'dired-up-directory)))
#+end_src

** Toggle Split
- [[https://www.emacswiki.org/emacs/ToggleWindowSplit][Source: emacswiki.com]]

"Vertical split shows more of each line, horizontal split shows more
lines. This code toggles between them. It only works for frames with
exactly two windows. The top window goes to the left or vice-versa. I
was motivated by ediff-toggle-split and helped by
TransposeWindows. There may well be better ways to write this."

#+begin_src emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
             (car next-win-edges))
               (<= (cadr this-win-edges)
             (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
           (car (window-edges (next-window))))
        'split-window-horizontally
      'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-M-,") 'toggle-window-split)
#+end_src

** Ask before closing emacs
#+begin_src emacs-lisp
  (defun close-ask-if-many-buffers ()
    "Asks if you really want to close emacs if more than 30 buffers are open.
   Otherwise closes emacs without asking."
    (interactive)
    (if (> (length (buffer-list)) 20)
        (progn
          (message "Really close? Many buffers are open. (y/n) ")
          (if (eq (read-char) 121)
              (save-buffers-kill-terminal)))
      (save-buffers-kill-terminal)))

  (global-set-key (kbd "C-x C-c") 'close-ask-if-many-buffers)
#+end_src

** Prolog
#+begin_src emacs-lisp
  (add-hook 'prolog-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-c") 'ediprolog-dwim)
              (run-starter-kit-coding-hook)))
#+end_src

** Themes

#+BEGIN_SRC emacs-lisp
;; Theme
;; (custom-set-variables
;;  '(custom-enabled-themes (quote (tsdh-dark))))
(load-file "~/.emacs.d/src/theme.el")
;(load-file "~/.emacs.d/src/at-night.el")
#+END_SRC

** Circadian (theme switching based on time)

#+begin_src emacs-lisp
;  (use-package circadian
;    :ensure t
;    :config
;    (setq circadian-themes '((:sunrise . at-day)
;                             (:sunset . at-night))
;    (circadian-setup))
  ;;                             (:sunset . tsdh-dark)))

#+end_src

** Transparency

#+BEGIN_SRC emacs-lisp
;  (set-frame-parameter (selected-frame) 'alpha '(95 . 85))
#+END_SRC

** Vimish-folds
https://github.com/mrkkrp/vimish-fold

#+BEGIN_SRC emacs-lisp
  (use-package vimish-fold
    :ensure t
    :init (vimish-fold-global-mode 1)
    :config
    (global-set-key (kbd "C-; f") #'vimish-fold)
    (global-set-key (kbd "C-; F") #'vimish-fold-delete)
    (global-set-key (kbd "M-<tab>") #'vimish-fold-toggle)
    (global-set-key (kbd "C-M-<tab>") #'vimish-fold-toggle-all)

    (custom-set-variables '(vimish-fold-header-width 50))
    (custom-set-faces
     '(vimish-fold-fringe ((t (:inherit nil
                                        :background "dark cyan"
                                        :foreground "spring green"))))))
#+END_SRC

** Tetris

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 27)
    (setq gamegrid-glyph-height-mm 8.0))
  (setq tetris-score-file "~/.emacs.d/scores/tetris-scores")
#+END_SRC

** Restclient

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
  (use-package ob-restclient
    :ensure t)
#+END_SRC

** Control Emacs Garbage collection

On Windows Emacs 25 turned out to be unbearibly slow, especially with
certain elements (as code elements, org-bullets, etc.) in
org-mode. The reason seems to be a too agressive garbage
collection ([[https://www.reddit.com/r/emacs/comments/55ork0/is_emacs_251_noticeably_slower_than_245_on_windows/][compare here]]). This code snippet fixes that issue.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq gc-cons-threshold (* 511 1024 1024))
    (setq gc-cons-percentage 0.5)
    (run-with-idle-timer 5 t #'garbage-collect)
    )
#+END_SRC

** Openwith mode

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (use-package openwith
      :ensure t
      :defer nil
      :config
      (openwith-mode t)
      ;; Prevent org-mode from opening inline images externally
      (defadvice org-display-inline-images
          (around handle-openwith
                  (&optional include-linked refresh beg end) activate compile)
        (if openwith-mode
            (progn
              (openwith-mode -1)
              ad-do-it
              (openwith-mode 1))
          ad-do-it))))

#+END_SRC

** VTL mode


#+BEGIN_SRC emacs-lisp
  (autoload 'vtl-mode "vtl" "VTL Mode" t)
#+END_SRC

** Graphql mode

#+BEGIN_SRC emacs-lisp
  (use-package graphql-mode
    :ensure t)
#+END_SRC
