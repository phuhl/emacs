#+TITLE: Emacs Starter Kit

* Implementation

This section contains all code implementing the Emacs Starter Kit.  It
is probably safe to stop reading at this point unless you are
interested in the actual code implementing the starter kit.

** Pathes
Pathes, potentially different on every system. That is why this code
generates a file called pathes.el which will contain all your pathes
you need. If you messed up this file, just delete it. It will be
automatically regenerated when you next start emacs.
#+begin_src emacs-lisp
  (let ((pathes-file (expand-file-name "pathes.el" starter-kit-dir)))
    (if (file-exists-p pathes-file)
        (load-file pathes-file)
      (progn
        (switch-to-buffer (find-file-noselect pathes-file))
        (insert ";;
  ;; This is your pathes.el file. You have to set it up only once.
  ;; This file must be saved in your emacs-starter-kit folder with
  ;; the name pathes.el. Everything is setup for you, just edit the
  ;; pathes and hit C-x C-s.
  ;;

  ;; Path-abbreviations for org-mode
  ;; ===============================
  ;; You can use them in links like this:
  ;; [[gitpath:myproject/.gitignore][.gitignore of myproject]]
  (setq org-link-abbrev-alist
        '((\"dropboxpath\" . \"~/Dropbox\")
          (\"cloudpath\" . \"~/\")
          (\"imgpath\" . \"~/images\")
          (\"gitpath\" . \"~/git\")
          ))

  ;; Project-settings for org-mode
  ;; =============================
  ;; Defines where your org-mode project lives
  (defvar org-base-dir \"~/todo\")
  ;; Defines where to export your org-project to
  (defvar org-exp-dir \"~/todo_html\")

  ;; Plantuml .jar path
  ;; ==================
  ;; If you do not have plantuml installed, you do not have to set this
  ;; variable to a valid path, but you will not be able to use plantuml.
  (defvar plantuml-dir \"/usr/share/plantuml/plantuml.jar\")

  ;; PATH-Variable
  ;; =============
  ;; If you need git, ediff, hunspell, ... you can set the paths to the
  ;; executables here. This setup is only required for windows systems.
  (when (eq system-type 'windows-nt)
    (setenv \"PATH\" (concat (getenv \"PATH\") \";C:/Program Files/diffutils/bin\"))
    (setq exec-path (append exec-path '(\"C:/Program Files/diffutils/bin\")))
    (setq exec-path (append exec-path '(\"C:/Program Files/Git/bin\")))
    (setq exec-path (append exec-path '(\"C:/Program Files/hunspell/bin\")))
    )

  ;; SSH-Keys
  ;; ========
  ;; This list is only used for windows systems. If you need some
  ;; ssh-keys for magit than here is the place to specify them.
  (setq my-ssh-agency-key-list (list ""))

  ;; Latitude and logitude
  ;; =====================
  ;; This is needed for circadian to provide use the correct time to switch
  ;; from the day to the night theme
  (setq calendar-latidute 50.783333333333)
  (setq calendar-longitude 5.0833333333333)
  (setq calendar-location-name \"Aachen, DE\")


  ;; Startupbuffer location
  ;; ======================
  ;; This can be used for synchronizing the startup-buffer between
  ;; different devices. Comment in, if you want to use it.
  ; (defvar custom-startup-buffer-location \"~/startupbuffer.org\")
  "))
      ))
#+end_src

** Starter kit basics
- ELPA archive repositories
  #+begin_src emacs-lisp
        (setq package-archives
              '(("gnu"         . "https://elpa.gnu.org/packages/")
                ("org"         . "http://orgmode.org/elpa/")
                ("melpa"       . "https://melpa.org/packages/")
    ;                ("marmalade"   . "http://marmalade-repo.org/packages/")
    ))
        (package-initialize)
  #+end_src

- Installing/Loading use-package
  #+begin_src emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (package-initialize)

    ;; Install 'use-package' if necessary
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (unless (package-installed-p 'diminish)
      (package-refresh-contents)
      (package-install 'diminish))

    ;; Enable use-package
    (eval-when-compile
      (require 'use-package))
    (require 'diminish)                ;; if you use :diminish
    (require 'bind-key)                ;; if you use any :bind variant
  #+end_src

- Org mode
  #+begin_src emacs-lisp
  (require 'cl)
  (setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
  (use-package org :ensure t)
  #+end_src

- Load path (=src= + subdirs, =elpa= for packages) and custom-file (=custom.el=)
  #+name: starter-kit-load-paths
  #+begin_src emacs-lisp
      (let ((elisp-dir (expand-file-name "src" starter-kit-dir)))
        ;; add the src directory to the load path
        (add-to-list 'load-path elisp-dir)
        ;; load specific files
        (when (file-exists-p elisp-dir)
          (let ((default-directory elisp-dir))
            (normal-top-level-add-subdirs-to-load-path))))
                                            ; (setq autoload-file (concat starter-kit-dir "loaddefs.el"))
      (setq package-user-dir (concat starter-kit-dir "elpa"))
      (setq custom-file (concat starter-kit-dir "custom.el"))
  #+end_src

- Ubiquitous Packages which should be loaded on startup rather than
  autoloaded on demand since they are likely to be used in every
  session.
  #+name: starter-kit-load-on-startup
  #+begin_src emacs-lisp
  ;    (require 'cl)
  ;    (require 'cl-lib)
  (require 'saveplace)
  ;    (require 'ffap)
  ;    (require 'uniquify)
  ;    (require 'ansi-color)
  ;    (require 'recentf)
  #+end_src

- Function for loading other parts of the starter kit
  #+name: starter-kit-load
  #+begin_src emacs-lisp
    (defun starter-kit-load (file &optional header-or-tag)
      "Load configuration from other starter-kit-*.org files.
    If the optional argument is the id of a subtree then only
    configuration from within that subtree will be loaded.  If it is
    not an id then it will be interpreted as a tag, and only subtrees
    marked with the given tag will be loaded.

    For example, to load all of starter-kit-lisp.org simply
    add (starter-kit-load \"lisp\") to your configuration.

    To load only the 'window-system' config from
    starter-kit-misc-recommended.org add
     (starter-kit-load \"misc-recommended\" \"window-system\")
    to your configuration."
      (let ((file (expand-file-name (if (string-match "starter-kit-.+\.org" file)
                                        file
                                      (format "starter-kit-%s.org" file))
                                    starter-kit-dir)))
        (org-babel-load-file
         (if header-or-tag
             (let* ((base (file-name-nondirectory file))
                    (dir  (file-name-directory file))
                    (partial-file (expand-file-name
                                   (concat "." (file-name-sans-extension base)
                                           ".part." header-or-tag ".org")
                                   dir)))
               (unless (file-exists-p partial-file)
                 (with-temp-file partial-file
                   (insert
                    (with-temp-buffer
                      (insert-file-contents file)
                      (save-excursion
                        (condition-case nil ;; collect as a header
                            (progn
                              (org-link-search (concat"#"header-or-tag))
                              (org-narrow-to-subtree)
                              (buffer-string))
                          (error ;; collect all entries with as tags
                           (let (body)
                             (org-map-entries
                              (lambda ()
                                (save-restriction
                                  (org-narrow-to-subtree)
                                  (setq body (concat body "\n" (buffer-string)))))
                              header-or-tag)
                             body))))))))
               partial-file)
           file))))
  #+end_src

- Work around a bug on OS X where system-name is FQDN.
  #+name: starter-kit-osX-workaround
  #+begin_src emacs-lisp
    (if (or
        (eq system-type 'darwin)
        (eq system-type 'berkeley-unix))
        (setq system-name (car (split-string system-name "\\."))))
  #+end_src
  
** Settings from M-x customize
#+name: m-x-customize-customizations
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src
** Starter kit core
The following files contain the remainder of the core of the Emacs
Starter Kit.  All of the code in this section should be loaded by
everyone using the starter kit.

- Starter kit function definitions in [[file:starter-kit-defuns.org][starter-kit-defuns]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-defuns.org")
  #+end_src

- Key Bindings in [[file:starter-kit-bindings.org][starter-kit-bindings]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-bindings.org")
  #+end_src

- Miscellaneous settings in [[file:starter-kit-misc.org][starter-kit-misc]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-misc.org")
  #+end_src

- Further stuff ([[file:starter-kit-haskell.org][starter-kit-haskell]], [[file:starter-kit-org.org][starter-kit-org]],
  [[file:starter-kit-yasnippet.org][starter-kit-yasnippet]], [[file:starter-kit-lisp.org][starter-kit-lisp]], [[file:starter-kit-js.org][starter-kit-js]],
  [[file:starter-kit-java.org][starter-kit-java]], [[file:starter-kit-web-mode.org][starter-kit-web-mode]])
  #+begin_src emacs-lisp
  (starter-kit-load "haskell")
  (starter-kit-load "yasnippet")
  (starter-kit-load "lisp")
  (starter-kit-load "js")
  (starter-kit-load "java")
  (starter-kit-load "web-mode")
  (starter-kit-load "python")
  (starter-kit-load "org")
  #+end_src

** Startup buffer

#+BEGIN_SRC emacs-lisp
;;(find-file "~/.emacs.d/tmp/scratch")
;;(org-mode)
;;(erase-buffer)
;;(insert initial-scratch-message)
;;(save-buffer)
#+END_SRC

